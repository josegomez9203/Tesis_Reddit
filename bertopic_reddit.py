# -*- coding: utf-8 -*-
"""BERTopic_Reddit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rSwxwHVORoCizhjYtw_GUwBiElT28QqZ
"""

location = "/home/josegomez/"

from bertopic import BERTopic
from sentence_transformers import SentenceTransformer
from sklearn.feature_extraction.text import CountVectorizer
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords


from umap import UMAP
from hdbscan import HDBSCAN

data_WS = pd.read_csv(location +"data/WallStreetbets.csv")
data_y = pd.read_csv(location +"data/Finance/Yahoo_GME.csv")
data_proc = pd.read_csv(location +"data/data_procesada.csv")
data_title = pd.read_csv(location +"data/data_title.csv")

del data['Unnamed: 0']
del data_proc['Unnamed: 0']
del data_title['Unnamed: 0']

from datasets import load_dataset

data = load_dataset(
    'jamescalam/reddit-topics', split='train',
    revision='c14d532'  # Especifica la version del dataset
)
# quita texto corto menor a 30
data = data.filter(lambda x: True if len(x['selftext']) > 30 else 0)
data

# Modelo UMAP y HDBSCAN

umap_model = UMAP(n_neighbors=3, n_components=3, min_dist=0.05)
hdbscan_model = HDBSCAN(min_cluster_size=80, min_samples=40,
                        prediction_data=True, gen_min_span_tree=True)

stopwords = list(stopwords.words('english')) + ['http', 'https', 'amp', 'com']

embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
# metodo para eliminar las stopwords
vectorizer_model = CountVectorizer(ngram_range=(1, 1), stop_words=stopwords)

model = BERTopic(
    umap_model=umap_model,
    hdbscan_model=hdbscan_model,
    embedding_model=embedding_model,
    vectorizer_model=vectorizer_model,
    top_n_words=2,
    language='english',
    calculate_probabilities=True,
    verbose=True
)
#model.fit(data['selftext'])
topics, probs = model.fit_transform(data['title'])

for i in range(5):
    print(f"{topics[i]}: {data_proc['Title'][i]}")

freq = model.get_topic_info()
freq.head(10)

model.visualize_topics()

model.visualize_barchart()

model.visualize_hierarchy()



